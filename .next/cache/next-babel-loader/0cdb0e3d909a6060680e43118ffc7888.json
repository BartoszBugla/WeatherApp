{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst types = [{\n  name: [\"light rain\", \"light intensity shower rain\"],\n  icon: \"lightRain\",\n  colors: [\"#C5C5C5\", \"#858383\"]\n}, {\n  name: [\"scattered clouds\", \"overcast clouds\"],\n  icon: \"cloud\",\n  colors: [\"#C5C5C5\", \"#858383\"]\n}, {\n  name: [\"clear sky\"],\n  icon: \"clear\",\n  colors: [\"#3991F3\", \"#66BEFE\"]\n}, {\n  name: [\"few clouds\"],\n  icon: \"cloudWithSun\",\n  colors: [\"#C5C5C5\", \"#858383\"]\n}, {\n  name: [\"heavy intensity rain\", \"very heavy rain\"],\n  icon: \"rain\",\n  colors: [\"#C5C5C5\", \"#858383\"]\n}, {\n  name: [\"fog\"],\n  icon: \"fog\",\n  colors: [\"#B2CBCF\", \"#3D7485\", \"#01081F\"]\n}, {\n  name: [\"hot\"],\n  icon: \"clear\",\n  colors: [\"#DF9E3C\", \"#D9621F\", \"#DE9A33\"]\n}];\nexport default function ConvertSkies(sky, temp, day) {\n  const skyinfo = types.find(item => {\n    const result = item.name.find(name => {\n      if (name === sky) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          name\n        });\n      }\n    });\n    return result;\n  });\n\n  if (!skyinfo) {\n    return {\n      name: \"not found\",\n      icon: null,\n      colors: [\"#C5C5C5\", \"#858383\"]\n    };\n  }\n\n  return skyinfo;\n}","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/customF/ConvertSkies.js"],"names":["types","name","icon","colors","ConvertSkies","sky","temp","day","skyinfo","find","item","result"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAG,CACV;AACIC,EAAAA,IAAI,EAAE,CAAC,YAAD,EAAe,6BAAf,CADV;AAEIC,EAAAA,IAAI,EAAE,WAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHZ,CADU,EAMV;AACIF,EAAAA,IAAI,EAAE,CAAC,kBAAD,EAAqB,iBAArB,CADV;AAEIC,EAAAA,IAAI,EAAE,OAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHZ,CANU,EAWV;AACIF,EAAAA,IAAI,EAAE,CAAC,WAAD,CADV;AAEIC,EAAAA,IAAI,EAAE,OAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHZ,CAXU,EAgBV;AACIF,EAAAA,IAAI,EAAE,CAAC,YAAD,CADV;AAEIC,EAAAA,IAAI,EAAE,cAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHZ,CAhBU,EAqBV;AACIF,EAAAA,IAAI,EAAE,CAAC,sBAAD,EAAyB,iBAAzB,CADV;AAEIC,EAAAA,IAAI,EAAE,MAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHZ,CArBU,EA0BV;AACIF,EAAAA,IAAI,EAAE,CAAC,KAAD,CADV;AAEIC,EAAAA,IAAI,EAAE,KAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB;AAHZ,CA1BU,EA+BV;AACIF,EAAAA,IAAI,EAAE,CAAC,KAAD,CADV;AAEIC,EAAAA,IAAI,EAAE,OAFV;AAGIC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB;AAHZ,CA/BU,CAAd;AAqCA,eAAe,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsC;AACjD,QAAMC,OAAO,GAAGR,KAAK,CAACS,IAAN,CAAYC,IAAD,IAAU;AACjC,UAAMC,MAAM,GAAGD,IAAI,CAACT,IAAL,CAAUQ,IAAV,CAAgBR,IAAD,IAAU;AACpC,UAAIA,IAAI,KAAKI,GAAb,EAAkB;AACd,+CAAYK,IAAZ;AAAkBT,UAAAA;AAAlB;AACH;AACJ,KAJc,CAAf;AAKA,WAAOU,MAAP;AACH,GAPe,CAAhB;;AASA,MAAI,CAACH,OAAL,EAAc;AACV,WAAO;AACHP,MAAAA,IAAI,EAAE,WADH;AAEHC,MAAAA,IAAI,EAAE,IAFH;AAGHC,MAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHL,KAAP;AAKH;;AAED,SAAOK,OAAP;AACH","sourcesContent":["const types = [\r\n    {\r\n        name: [\"light rain\", \"light intensity shower rain\"],\r\n        icon: \"lightRain\",\r\n        colors: [\"#C5C5C5\", \"#858383\"],\r\n    },\r\n    {\r\n        name: [\"scattered clouds\", \"overcast clouds\"],\r\n        icon: \"cloud\",\r\n        colors: [\"#C5C5C5\", \"#858383\"],\r\n    },\r\n    {\r\n        name: [\"clear sky\"],\r\n        icon: \"clear\",\r\n        colors: [\"#3991F3\", \"#66BEFE\"],\r\n    },\r\n    {\r\n        name: [\"few clouds\"],\r\n        icon: \"cloudWithSun\",\r\n        colors: [\"#C5C5C5\", \"#858383\"],\r\n    },\r\n    {\r\n        name: [\"heavy intensity rain\", \"very heavy rain\"],\r\n        icon: \"rain\",\r\n        colors: [\"#C5C5C5\", \"#858383\"],\r\n    },\r\n    {\r\n        name: [\"fog\"],\r\n        icon: \"fog\",\r\n        colors: [\"#B2CBCF\", \"#3D7485\", \"#01081F\"],\r\n    },\r\n    {\r\n        name: [\"hot\"],\r\n        icon: \"clear\",\r\n        colors: [\"#DF9E3C\", \"#D9621F\", \"#DE9A33\"],\r\n    },\r\n];\r\nexport default function ConvertSkies(sky, temp, day) {\r\n    const skyinfo = types.find((item) => {\r\n        const result = item.name.find((name) => {\r\n            if (name === sky) {\r\n                return { ...item, name };\r\n            }\r\n        });\r\n        return result;\r\n    });\r\n\r\n    if (!skyinfo) {\r\n        return {\r\n            name: \"not found\",\r\n            icon: null,\r\n            colors: [\"#C5C5C5\", \"#858383\"],\r\n        };\r\n    }\r\n\r\n    return skyinfo;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
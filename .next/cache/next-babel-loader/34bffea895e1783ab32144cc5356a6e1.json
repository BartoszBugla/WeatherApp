{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\components\\\\Block.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nvar blockSize = 180;\nvar margin = 10;\nvar Cont = styled.a.withConfig({\n  displayName: \"Block__Cont\",\n  componentId: \"bq5cpa-0\"\n})([\"float:left;text-align:center;width:\", \"px;height:\", \"px;display:flex;color:white;\", \" justify-content:center;flex-direction:column;margin:\", \"px;border-radius:5px;&:focus{transform:scale(1.1);border-radius:15px;outline:none;}@media (max-width:800px){width:100px;height:100px;font-size:0.7rem;}&:hover{-webkit-filter:brightness(120%);-webkit-transition:all 1s ease;-moz-transition:all 1s ease;-o-transition:all 1s ease;-ms-transition:all 1s ease;transition:all 1s ease;}\"], blockSize + 40, blockSize, function (props) {\n  if (props.colors) {\n    if (props.colors[2]) return \"background: linear-gradient(180deg, \".concat(props.colors[0], \" 0%, \").concat(props.colors[1], \" 50.52%, \").concat(props.colors[2], \" 100%);\");else return \"background: linear-gradient(180deg, \".concat(props.colors[0], \" 0%,  \").concat(props.colors[1], \" 100%);\");\n  }\n}, margin);\nvar SvgContainer = styled.div.withConfig({\n  displayName: \"Block__SvgContainer\",\n  componentId: \"bq5cpa-1\"\n})([\"display:flex;flex-direction:row;align-items:center;text-align:center;justify-content:center;*{margin:2px 5px;}svg{height:40px;width:40px;fill:white;}\"]);\nvar apikey1 = process.env.API_KEY_1;\nvar apikey2 = process.env.API_KEY_2;\nvar initialState = {\n  city: \"\",\n  main: {\n    temp: 0\n  }\n};\n\nvar Block = function Block(_ref) {\n  _s();\n\n  var city = _ref.city;\n\n  var _useState = useState(initialState),\n      data = _useState[0],\n      setData = _useState[1];\n\n  city = \"las palmas\";\n  useEffect(function () {\n    var fetchCoords = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var url, fetchedCoords, loc;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = \"https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=\".concat(apikey1, \"&searchtext=\").concat(city);\n                _context.next = 3;\n                return axios(url);\n\n              case 3:\n                fetchedCoords = _context.sent;\n                // setCoords(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\n                // console.log(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\n                // console.log(coords);\n                loc = fetchedCoords.data.Response.View[0].Result[0].Location; // const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\n                // const { Latitude, Longitude } = loc.DisplayPosition;\n\n                return _context.abrupt(\"return\", loc.DisplayPosition);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchCoords() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(item) {\n        var url2, fetchedData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url2 = \"http://api.openweathermap.org/data/2.5/weather?lat=\".concat(item.Latitude, \"&lon=\").concat(item.Longitude, \"&appid=\").concat(apikey2);\n                _context2.next = 3;\n                return axios(url2);\n\n              case 3:\n                fetchedData = _context2.sent;\n                return _context2.abrupt(\"return\", fetchedData.data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetchData(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    var fetch = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var item, weather;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetchCoords();\n\n              case 2:\n                item = _context3.sent;\n                _context3.next = 5;\n                return fetchData(item);\n\n              case 5:\n                weather = _context3.sent;\n                setData(weather);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function fetch() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    fetch();\n  }, []);\n  console.log(data.main);\n  var temperature = Math.round(data.main.temp - 273.15); // const { colors, name, icon } = ConvertSkies(data.weather[0].description, temperature);\n\n  var url = \"/result?cityName=\".concat(data.city);\n  if (!data) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 23\n    }\n  }, \"Loading\");\n  if (data) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 22\n    }\n  }, \"Loading\"); // return (\n  //     <Link href={url}>\n  //         <Cont href=\"#\" colors={colors}>\n  //             <p>{data.city}</p>\n  //             <SvgContainer>\n  //                 <SVG type={icon} />\n  //                 <p>{temperature}</p>\n  //             </SvgContainer>\n  //             <p> {data.weather.weather[0].description}</p>\n  //         </Cont>\n  //     </Link>\n  // );\n};\n\n_s(Block, \"EDyOj9y54MnR81NlJUdHFTEAg0Y=\");\n\n_c = Block;\nexport default Block;\n\nvar _c;\n\n$RefreshReg$(_c, \"Block\");","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/components/Block.tsx"],"names":["React","useEffect","useState","styled","axios","blockSize","margin","Cont","a","props","colors","SvgContainer","div","apikey1","process","env","API_KEY_1","apikey2","API_KEY_2","initialState","city","main","temp","Block","data","setData","fetchCoords","url","fetchedCoords","loc","Response","View","Result","Location","DisplayPosition","fetchData","item","url2","Latitude","Longitude","fetchedData","fetch","weather","console","log","temperature","Math","round"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ConvertSkies from \"../customF/ConvertSkies\";\r\nimport styled from \"styled-components\";\r\nimport Link from \"next/link\";\r\nimport axios from \"axios\";\r\nimport SVG from \"../static/svg/svg\";\r\nconst blockSize = 180;\r\nconst margin = 10;\r\nconst Cont = styled.a`\r\n    float: left;\r\n    text-align: center;\r\n    width: ${blockSize + 40}px;\r\n    height: ${blockSize}px;\r\n    display: flex;\r\n    color: white;\r\n    ${(props) => {\r\n        if (props.colors) {\r\n            if (props.colors[2])\r\n                return `background: linear-gradient(180deg, ${props.colors[0]} 0%, ${props.colors[1]} 50.52%, ${props.colors[2]} 100%);`;\r\n            else return `background: linear-gradient(180deg, ${props.colors[0]} 0%,  ${props.colors[1]} 100%);`;\r\n        }\r\n    }}\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: ${margin}px;\r\n    border-radius: 5px;\r\n    &:focus {\r\n        transform: scale(1.1);\r\n        border-radius: 15px;\r\n        outline: none;\r\n    }\r\n    @media (max-width: 800px) {\r\n        width: 100px;\r\n        height: 100px;\r\n        font-size: 0.7rem;\r\n    }\r\n    &:hover {\r\n        -webkit-filter: brightness(120%);\r\n        -webkit-transition: all 1s ease;\r\n        -moz-transition: all 1s ease;\r\n        -o-transition: all 1s ease;\r\n        -ms-transition: all 1s ease;\r\n        transition: all 1s ease;\r\n    }\r\n`;\r\nconst SvgContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    text-align: center;\r\n    justify-content: center;\r\n    * {\r\n        margin: 2px 5px;\r\n    }\r\n    svg {\r\n        height: 40px;\r\n        width: 40px;\r\n        fill: white;\r\n    }\r\n`;\r\nconst apikey1 = process.env.API_KEY_1;\r\nconst apikey2 = process.env.API_KEY_2;\r\nconst initialState = {\r\n    city: \"\",\r\n    main: { temp: 0 },\r\n};\r\n\r\nconst Block = ({ city }) => {\r\n    const [data, setData] = useState(initialState);\r\n    city = \"las palmas\";\r\n    useEffect(() => {\r\n        const fetchCoords = async () => {\r\n            const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${city}`;\r\n            const fetchedCoords = await axios(url);\r\n            // setCoords(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\r\n            // console.log(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\r\n            // console.log(coords);\r\n            const loc = fetchedCoords.data.Response.View[0].Result[0].Location;\r\n            // const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\r\n            // const { Latitude, Longitude } = loc.DisplayPosition;\r\n            return loc.DisplayPosition;\r\n        };\r\n        const fetchData = async (item) => {\r\n            const url2 = `http://api.openweathermap.org/data/2.5/weather?lat=${item.Latitude}&lon=${item.Longitude}&appid=${apikey2}`;\r\n            const fetchedData = await axios(url2);\r\n            return fetchedData.data;\r\n        };\r\n        const fetch = async () => {\r\n            const item = await fetchCoords();\r\n            const weather = await fetchData(item);\r\n            setData(weather);\r\n        };\r\n        fetch();\r\n    }, []);\r\n    console.log(data.main);\r\n    const temperature = Math.round(data.main.temp - 273.15);\r\n    // const { colors, name, icon } = ConvertSkies(data.weather[0].description, temperature);\r\n    const url = `/result?cityName=${data.city}`;\r\n    if (!data) return <div>Loading</div>;\r\n    if (data) return <div>Loading</div>;\r\n    // return (\r\n    //     <Link href={url}>\r\n    //         <Cont href=\"#\" colors={colors}>\r\n    //             <p>{data.city}</p>\r\n    //             <SvgContainer>\r\n    //                 <SVG type={icon} />\r\n    //                 <p>{temperature}</p>\r\n    //             </SvgContainer>\r\n    //             <p> {data.weather.weather[0].description}</p>\r\n    //         </Cont>\r\n    //     </Link>\r\n    // );\r\n};\r\n\r\nexport default Block;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\current.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    max-height: 100vh;\\n    flex: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport Search from \"../components/Search\";\nimport Result from \"../components/Result\";\nimport styled from \"styled-components\";\nvar Container = styled.div(_templateObject());\n_c = Container;\n\nvar index = function index(_ref) {\n  var data = _ref.data,\n      city = _ref.city,\n      error = _ref.error;\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  var temperature = Math.round(data.main.temp - 273.15);\n  var sky = data.weather[0].description;\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }), __jsx(Result, {\n    temperature: temperature,\n    city: city,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport var __N_SSP = true;\nexport default index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/current.tsx"],"names":["React","Search","Result","styled","Container","div","index","data","city","error","temperature","Math","round","main","temp","sky","weather","description"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,SAAS,GAAGD,MAAM,CAACE,GAAV,mBAAf;KAAMD,S;;AAIN,IAAME,KAAK,GAAG,SAARA,KAAQ,OAA2B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACrC,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACX,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,IAAL,CAAUC,IAAV,GAAiB,MAA5B,CAApB;AACA,MAAMC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,WAA5B;AAEA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,WAAW,EAAEP,WAArB;AAAkC,IAAA,IAAI,EAAEF,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAXD;;;AAuCA,eAAeF,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Router from \"next/router\";\r\nimport Search from \"../components/Search\";\r\nimport Result from \"../components/Result\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    max-height: 100vh;\r\n    flex: 1;\r\n`;\r\nconst index = ({ data, city, error }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.main.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n\r\n    return (\r\n        <Container>\r\n            <Search />\r\n            <Result temperature={temperature} city={city} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.Label;\r\n    // console.log(fetchedCoords.Response.View[0].Result[0].Location.Address);\r\n    // ////////////////////////////////////\r\n\r\n    const url2 = `https://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\r\n    const data = await (await fetch(url2)).json();\r\n    console.log(data);\r\n    return { props: { data, city } };\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
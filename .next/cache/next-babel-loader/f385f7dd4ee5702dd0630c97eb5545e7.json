{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\result.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Layout from \"../components/Layout\";\nimport WeatherBox from \"../components/WeatherBox\";\nimport Useless from \"../components/Useless\";\nimport NewForecast from \"../components/NewForecast\";\n\nconst result = ({\n  data,\n  city,\n  error,\n  forecast,\n  timezone\n}) => {\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  const temperature = Math.round(data.temp - 273.15);\n  const sky = data.weather[0].description;\n  return __jsx(Layout, {\n    title: `Weather in ${city} `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(WeatherBox, {\n    timezone: timezone,\n    dt: {\n      cur: data.dt,\n      rise: data.sunrise,\n      set: data.sunset\n    },\n    temperature: temperature,\n    sky: sky,\n    city: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(Useless, {\n    tz: timezone,\n    wind: data.wind_speed,\n    sunrise: data.sunrise,\n    sunset: data.sunset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  })), __jsx(NewForecast, {\n    forecast: forecast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport async function getServerSideProps(ctx) {\n  const {\n    query\n  } = ctx;\n  const queryCity = query.cityName ? query.cityName : \"Berlin\";\n  const apikey1 = process.env.API_KEY_1;\n  const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${queryCity}`;\n  const fetchedCoords = await (await fetch(url)).json();\n\n  if (fetchedCoords.Response.View[0] == undefined) {\n    return {\n      props: {\n        error: \"oops\"\n      }\n    };\n  }\n\n  const {\n    Latitude,\n    Longitude\n  } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\n  const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District ? fetchedCoords.Response.View[0].Result[0].Location.Address.District : fetchedCoords.Response.View[0].Result[0].Location.Address.City; // console.log(fetchedCoords.Response.View[0]);\n  // ////////////////////////////////////`\n\n  const apikey2 = process.env.API_KEY_2;\n  const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\n    exclude=current,daily&appid=${apikey2}`;\n  const data = await (await fetch(url2)).json();\n  const current = data.current;\n  const forecast = data.daily;\n  const timezone = data.timezone_offset;\n  return {\n    props: {\n      data: current,\n      forecast,\n      city,\n      timezone\n    }\n  };\n}\nexport default result;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/result.tsx"],"names":["React","fetch","Layout","WeatherBox","Useless","NewForecast","result","data","city","error","forecast","timezone","temperature","Math","round","temp","sky","weather","description","cur","dt","rise","sunrise","set","sunset","wind_speed","getServerSideProps","ctx","query","queryCity","cityName","apikey1","process","env","API_KEY_1","url","fetchedCoords","json","Response","View","undefined","props","Latitude","Longitude","Result","Location","DisplayPosition","Address","District","City","apikey2","API_KEY_2","url2","current","daily","timezone_offset"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Layout from \"../components/Layout\";\r\nimport WeatherBox from \"../components/WeatherBox\";\r\n\r\nimport Useless from \"../components/Useless\";\r\nimport NewForecast from \"../components/NewForecast\";\r\n\r\nconst result = ({ data, city, error, forecast, timezone }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n\r\n    return (\r\n        <Layout title={`Weather in ${city} `}>\r\n            <WeatherBox\r\n                timezone={timezone}\r\n                dt={{ cur: data.dt, rise: data.sunrise, set: data.sunset }}\r\n                temperature={temperature}\r\n                sky={sky}\r\n                city={city}\r\n            >\r\n                <Useless tz={timezone} wind={data.wind_speed} sunrise={data.sunrise} sunset={data.sunset} />\r\n            </WeatherBox>\r\n            <NewForecast forecast={forecast} />\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n    const apikey1 = process.env.API_KEY_1;\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        ? fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        : fetchedCoords.Response.View[0].Result[0].Location.Address.City;\r\n    // console.log(fetchedCoords.Response.View[0]);\r\n    // ////////////////////////////////////`\r\n    const apikey2 = process.env.API_KEY_2;\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=${apikey2}`;\r\n    const data = await (await fetch(url2)).json();\r\n    const current = data.current;\r\n    const forecast = data.daily;\r\n    const timezone = data.timezone_offset;\r\n    return { props: { data: current, forecast, city, timezone } };\r\n}\r\n\r\nexport default result;\r\n"]},"metadata":{},"sourceType":"module"}
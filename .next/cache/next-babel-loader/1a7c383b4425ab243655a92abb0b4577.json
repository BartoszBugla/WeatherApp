{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\components\\\\Block.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nconst blockSize = 180;\nconst margin = 10;\nconst Cont = styled.a.withConfig({\n  displayName: \"Block__Cont\",\n  componentId: \"bq5cpa-0\"\n})([\"float:left;text-align:center;width:\", \"px;height:\", \"px;display:flex;color:white;\", \" justify-content:center;flex-direction:column;margin:\", \"px;border-radius:5px;&:focus{transform:scale(1.1);border-radius:15px;outline:none;}@media (max-width:800px){width:100px;height:100px;font-size:0.7rem;}&:hover{-webkit-filter:brightness(120%);-webkit-transition:all 1s ease;-moz-transition:all 1s ease;-o-transition:all 1s ease;-ms-transition:all 1s ease;transition:all 1s ease;}\"], blockSize + 40, blockSize, props => {\n  if (props.colors) {\n    if (props.colors[2]) return `background: linear-gradient(180deg, ${props.colors[0]} 0%, ${props.colors[1]} 50.52%, ${props.colors[2]} 100%);`;else return `background: linear-gradient(180deg, ${props.colors[0]} 0%,  ${props.colors[1]} 100%);`;\n  }\n}, margin);\nconst SvgContainer = styled.div.withConfig({\n  displayName: \"Block__SvgContainer\",\n  componentId: \"bq5cpa-1\"\n})([\"display:flex;flex-direction:row;align-items:center;text-align:center;justify-content:center;*{margin:2px 5px;}svg{height:40px;width:40px;fill:white;}\"]);\nconst apikey1 = process.env.API_KEY_1;\nconst apikey2 = process.env.API_KEY_2;\nconst initialState = {\n  weather: {\n    weather: [{\n      description: \"\"\n    }],\n    main: {\n      temp: 0\n    }\n  },\n  city: \"\"\n};\n\nconst Block = ({\n  city\n}) => {\n  const {\n    0: data,\n    1: setData\n  } = useState(initialState);\n  const {\n    0: coords,\n    1: setCoords\n  } = useState({});\n  city = \"las palmas\";\n  useEffect(() => {\n    const fetchCoords = async () => {\n      const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${city}`;\n      const fetchedCoords = await axios(url); // setCoords(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\n      // console.log(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\n      // console.log(coords);\n\n      const loc = fetchedCoords.data.Response.View[0].Result[0].Location; // const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\n      // const { Latitude, Longitude } = loc.DisplayPosition;\n\n      return loc.DisplayPosition;\n    };\n\n    const fetchData = async item => {\n      const url2 = `http://api.openweathermap.org/data/2.5/weather?lat=${item.Latitude}&lon=${item.Longitude}&appid=${apikey2}`;\n      const fetchedData = await axios(url2);\n      return fetchedData.data;\n    };\n\n    const fetch = async () => {\n      const item = await fetchCoords();\n      const weather = await fetchData(item);\n      setData(weather);\n    };\n\n    fetch();\n  }, []);\n  console.log(data); // const temperature = Math.round(data.weather.main.temp - 273.15);\n  // const { colors, name, icon } = ConvertSkies(data.weather.weather[0].description, temperature);\n  // const url = `/result?cityName=${data.city}`;\n\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }\n  }, \"Loading\");\n  if (data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 22\n    }\n  }, \"Loading\"); // return (\n  //     <Link href={url}>\n  //         <Cont href=\"#\" colors={colors}>\n  //             <p>{data.city}</p>\n  //             <SvgContainer>\n  //                 <SVG type={icon} />\n  //                 <p>{temperature}</p>\n  //             </SvgContainer>\n  //             <p> {data.weather.weather[0].description}</p>\n  //         </Cont>\n  //     </Link>\n  // );\n};\n\nexport default Block;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/components/Block.tsx"],"names":["React","useEffect","useState","styled","axios","blockSize","margin","Cont","a","props","colors","SvgContainer","div","apikey1","process","env","API_KEY_1","apikey2","API_KEY_2","initialState","weather","description","main","temp","city","Block","data","setData","coords","setCoords","fetchCoords","url","fetchedCoords","loc","Response","View","Result","Location","DisplayPosition","fetchData","item","url2","Latitude","Longitude","fetchedData","fetch","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ConvertSkies from \"../customF/ConvertSkies\";\r\nimport styled from \"styled-components\";\r\nimport Link from \"next/link\";\r\nimport axios from \"axios\";\r\nimport SVG from \"../static/svg/svg\";\r\nconst blockSize = 180;\r\nconst margin = 10;\r\nconst Cont = styled.a`\r\n    float: left;\r\n    text-align: center;\r\n    width: ${blockSize + 40}px;\r\n    height: ${blockSize}px;\r\n    display: flex;\r\n    color: white;\r\n    ${(props) => {\r\n        if (props.colors) {\r\n            if (props.colors[2])\r\n                return `background: linear-gradient(180deg, ${props.colors[0]} 0%, ${props.colors[1]} 50.52%, ${props.colors[2]} 100%);`;\r\n            else return `background: linear-gradient(180deg, ${props.colors[0]} 0%,  ${props.colors[1]} 100%);`;\r\n        }\r\n    }}\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: ${margin}px;\r\n    border-radius: 5px;\r\n    &:focus {\r\n        transform: scale(1.1);\r\n        border-radius: 15px;\r\n        outline: none;\r\n    }\r\n    @media (max-width: 800px) {\r\n        width: 100px;\r\n        height: 100px;\r\n        font-size: 0.7rem;\r\n    }\r\n    &:hover {\r\n        -webkit-filter: brightness(120%);\r\n        -webkit-transition: all 1s ease;\r\n        -moz-transition: all 1s ease;\r\n        -o-transition: all 1s ease;\r\n        -ms-transition: all 1s ease;\r\n        transition: all 1s ease;\r\n    }\r\n`;\r\nconst SvgContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    text-align: center;\r\n    justify-content: center;\r\n    * {\r\n        margin: 2px 5px;\r\n    }\r\n    svg {\r\n        height: 40px;\r\n        width: 40px;\r\n        fill: white;\r\n    }\r\n`;\r\nconst apikey1 = process.env.API_KEY_1;\r\nconst apikey2 = process.env.API_KEY_2;\r\nconst initialState = {\r\n    weather: { weather: [{ description: \"\" }], main: { temp: 0 } },\r\n    city: \"\",\r\n};\r\n\r\nconst Block = ({ city }) => {\r\n    const [data, setData] = useState(initialState);\r\n    const [coords, setCoords] = useState({});\r\n    city = \"las palmas\";\r\n    useEffect(() => {\r\n        const fetchCoords = async () => {\r\n            const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${city}`;\r\n            const fetchedCoords = await axios(url);\r\n            // setCoords(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\r\n            // console.log(fetchedCoords.data.Response.View[0].Result[0].Location.DisplayPosition);\r\n            // console.log(coords);\r\n            const loc = fetchedCoords.data.Response.View[0].Result[0].Location;\r\n            // const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\r\n            // const { Latitude, Longitude } = loc.DisplayPosition;\r\n            return loc.DisplayPosition;\r\n        };\r\n        const fetchData = async (item) => {\r\n            const url2 = `http://api.openweathermap.org/data/2.5/weather?lat=${item.Latitude}&lon=${item.Longitude}&appid=${apikey2}`;\r\n            const fetchedData = await axios(url2);\r\n            return fetchedData.data;\r\n        };\r\n        const fetch = async () => {\r\n            const item = await fetchCoords();\r\n            const weather = await fetchData(item);\r\n            setData(weather);\r\n        };\r\n        fetch();\r\n    }, []);\r\n    console.log(data);\r\n    // const temperature = Math.round(data.weather.main.temp - 273.15);\r\n    // const { colors, name, icon } = ConvertSkies(data.weather.weather[0].description, temperature);\r\n    // const url = `/result?cityName=${data.city}`;\r\n    if (!data) return <div>Loading</div>;\r\n    if (data) return <div>Loading</div>;\r\n    // return (\r\n    //     <Link href={url}>\r\n    //         <Cont href=\"#\" colors={colors}>\r\n    //             <p>{data.city}</p>\r\n    //             <SvgContainer>\r\n    //                 <SVG type={icon} />\r\n    //                 <p>{temperature}</p>\r\n    //             </SvgContainer>\r\n    //             <p> {data.weather.weather[0].description}</p>\r\n    //         </Cont>\r\n    //     </Link>\r\n    // );\r\n};\r\n\r\nexport default Block;\r\n"]},"metadata":{},"sourceType":"module"}
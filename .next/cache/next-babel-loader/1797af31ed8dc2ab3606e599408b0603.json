{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\index.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from \"react\";\nimport Search from \"../components/Search\";\nimport FavouriteCities from \"../components/FavouriteCities\";\n\nvar index = function index(_ref) {\n  var _ref$popular = _ref.popular,\n      popular = _ref$popular === void 0 ? [] : _ref$popular,\n      _ref$liked = _ref.liked,\n      liked = _ref$liked === void 0 ? [] : _ref$liked;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }\n  }), __jsx(FavouriteCities, {\n    text: \"Cities You liked\",\n    data: liked,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }), __jsx(FavouriteCities, {\n    text: \"Some popular cities\",\n    data: popular,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar f = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var array,\n        apikey1,\n        apikey2,\n        returned,\n        _iterator,\n        _step,\n        city,\n        url,\n        fetchedCoords,\n        loc,\n        cityName,\n        _loc$DisplayPosition,\n        Latitude,\n        Longitude,\n        url2,\n        weather,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            array = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n            apikey1 = process.env.API_KEY_1;\n            apikey2 = process.env.API_KEY_2;\n            returned = [];\n            _iterator = _createForOfIteratorHelper(array);\n            _context.prev = 5;\n\n            _iterator.s();\n\n          case 7:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 30;\n              break;\n            }\n\n            city = _step.value;\n            url = \"https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=\".concat(apikey1, \"&searchtext=\").concat(city);\n            _context.next = 12;\n            return fetch(url);\n\n          case 12:\n            _context.next = 14;\n            return _context.sent.json();\n\n          case 14:\n            fetchedCoords = _context.sent;\n\n            if (!(fetchedCoords.Response.View[0] == undefined)) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              props: {\n                error: \"oops\"\n              }\n            });\n\n          case 17:\n            loc = fetchedCoords.Response.View[0].Result[0].Location;\n            cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\n            _loc$DisplayPosition = loc.DisplayPosition, Latitude = _loc$DisplayPosition.Latitude, Longitude = _loc$DisplayPosition.Longitude;\n            url2 = \"http://api.openweathermap.org/data/2.5/weather?lat=\".concat(Latitude, \"&lon=\").concat(Longitude, \"&appid=\").concat(apikey2, \"\\n    \");\n            _context.next = 23;\n            return fetch(url2);\n\n          case 23:\n            _context.next = 25;\n            return _context.sent.json();\n\n          case 25:\n            weather = _context.sent;\n            returned.push({\n              weather: weather,\n              city: cityName\n            });\n            console.log(returned);\n\n          case 28:\n            _context.next = 7;\n            break;\n\n          case 30:\n            _context.next = 35;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](5);\n\n            _iterator.e(_context.t0);\n\n          case 35:\n            _context.prev = 35;\n\n            _iterator.f();\n\n            return _context.finish(35);\n\n          case 38:\n            return _context.abrupt(\"return\", returned);\n\n          case 39:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 32, 35, 38]]);\n  }));\n\n  return function f() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // export async function getServerSideProps(ctx) {\n//     const favouriteCities = [\"rogow\", \"moskwa\", \"New York\", \"las palmas\", \"paryz\", \" ankara\", \"gorzyce\"];\n//     const popularCities = [\"rogow\", \"moskwa\", \"Dlugomilowice\", \"los angeles\", \"amsterdam\", \" roma\", \"gorzyce\"];\n//     const liked = await f(favouriteCities);\n//     const popular = await f(popularCities);\n//     console.log(liked);\n//     return { props: { liked, popular } };\n// }\n\n\nexport default index;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/index.tsx"],"names":["React","Search","FavouriteCities","index","popular","liked","f","array","apikey1","process","env","API_KEY_1","apikey2","API_KEY_2","returned","city","url","fetch","json","fetchedCoords","Response","View","undefined","props","error","loc","Result","Location","cityName","Address","District","City","DisplayPosition","Latitude","Longitude","url2","weather","push","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Search from \"../components/Search\";\r\nimport FavouriteCities from \"../components/FavouriteCities\";\r\nconst index = ({ popular = [], liked = [] }) => {\r\n    return (\r\n        <div>\r\n            <Search />\r\n            <FavouriteCities text=\"Cities You liked\" data={liked} />\r\n            <FavouriteCities text=\"Some popular cities\" data={popular} />\r\n        </div>\r\n    );\r\n};\r\nconst f = async (array = []) => {\r\n    const apikey1 = process.env.API_KEY_1;\r\n    const apikey2 = process.env.API_KEY_2;\r\n    const returned = [];\r\n    for (let city of array) {\r\n        const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${city}`;\r\n        const fetchedCoords = await (await fetch(url)).json();\r\n        if (fetchedCoords.Response.View[0] == undefined) {\r\n            return {\r\n                props: {\r\n                    error: \"oops\",\r\n                },\r\n            };\r\n        }\r\n        const loc = fetchedCoords.Response.View[0].Result[0].Location;\r\n        const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\r\n        const { Latitude, Longitude } = loc.DisplayPosition;\r\n        const url2 = `http://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=${apikey2}\r\n    `;\r\n\r\n        const weather = await (await fetch(url2)).json();\r\n\r\n        returned.push({ weather: weather, city: cityName });\r\n        console.log(returned);\r\n    }\r\n    return returned;\r\n};\r\n// export async function getServerSideProps(ctx) {\r\n//     const favouriteCities = [\"rogow\", \"moskwa\", \"New York\", \"las palmas\", \"paryz\", \" ankara\", \"gorzyce\"];\r\n//     const popularCities = [\"rogow\", \"moskwa\", \"Dlugomilowice\", \"los angeles\", \"amsterdam\", \" roma\", \"gorzyce\"];\r\n\r\n//     const liked = await f(favouriteCities);\r\n//     const popular = await f(popularCities);\r\n//     console.log(liked);\r\n//     return { props: { liked, popular } };\r\n// }\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
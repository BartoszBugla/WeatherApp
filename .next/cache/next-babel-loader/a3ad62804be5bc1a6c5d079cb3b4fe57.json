{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Search from \"../components/Search\";\nimport FavouriteCities from \"../components/FavouriteCities\";\n\nconst index = ({\n  data = []\n}) => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }\n  }), __jsx(FavouriteCities, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }), __jsx(FavouriteCities, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst f = async (array = []) => {\n  const apikey1 = process.env.API_KEY_1;\n  const apikey2 = process.env.API_KEY_2;\n  const returned = [];\n\n  for (let city of array) {\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${city}`;\n    const fetchedCoords = await (await fetch(url)).json();\n\n    if (fetchedCoords.Response.View[0] == undefined) {\n      return {\n        props: {\n          error: \"oops\"\n        }\n      };\n    }\n\n    const loc = fetchedCoords.Response.View[0].Result[0].Location;\n    const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\n    const {\n      Latitude,\n      Longitude\n    } = loc.DisplayPosition;\n    const url2 = `http://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=${apikey2}\n    `;\n    const weather = await (await fetch(url2)).json();\n    returned.push({\n      weather: weather,\n      city: cityName\n    });\n    console.log(returned);\n  }\n\n  return returned;\n};\n\nexport async function getServerSideProps(ctx) {\n  const favouriteCities = [\"rogow\", \"moskwa\", \"New York\", \"las palmas\", \"paryz\", \" ankara\", \"gorzyce\"];\n  const popularCities = [\"rogow\", \"moskwa\", \"New York\", \"las palmas\", \"paryz\", \" ankara\", \"gorzyce\"];\n  const liked = await f(favouriteCities);\n  const popular = await f(popularCities);\n  console.log(liked);\n  return {\n    props: {}\n  };\n}\nexport default index;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/index.tsx"],"names":["React","Search","FavouriteCities","index","data","f","array","apikey1","process","env","API_KEY_1","apikey2","API_KEY_2","returned","city","url","fetchedCoords","fetch","json","Response","View","undefined","props","error","loc","Result","Location","cityName","Address","District","City","Latitude","Longitude","DisplayPosition","url2","weather","push","console","log","getServerSideProps","ctx","favouriteCities","popularCities","liked","popular"],"mappings":";;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;;AACA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG;AAAT,CAAD,KAAmB;AAC7B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEA,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEA,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CARD;;AASA,MAAMC,CAAC,GAAG,OAAOC,KAAK,GAAG,EAAf,KAAsB;AAC5B,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA5B;AACA,QAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,SAA5B;AACA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,IAAT,IAAiBR,KAAjB,EAAwB;AACpB,UAAMS,GAAG,GAAI,2DAA0DR,OAAQ,eAAcO,IAAK,EAAlG;AACA,UAAME,aAAa,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,GAAD,CAAZ,EAAmBG,IAAnB,EAA5B;;AACA,QAAIF,aAAa,CAACG,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,KAAkCC,SAAtC,EAAiD;AAC7C,aAAO;AACHC,QAAAA,KAAK,EAAE;AACHC,UAAAA,KAAK,EAAE;AADJ;AADJ,OAAP;AAKH;;AACD,UAAMC,GAAG,GAAGR,aAAa,CAACG,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,EAA+BK,MAA/B,CAAsC,CAAtC,EAAyCC,QAArD;AACA,UAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYC,QAAZ,GAAuBL,GAAG,CAACI,OAAJ,CAAYC,QAAnC,GAA8CL,GAAG,CAACI,OAAJ,CAAYE,IAA3E;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BR,GAAG,CAACS,eAApC;AACA,UAAMC,IAAI,GAAI,sDAAqDH,QAAS,QAAOC,SAAU,UAASrB,OAAQ;KAA9G;AAGA,UAAMwB,OAAO,GAAG,MAAM,CAAC,MAAMlB,KAAK,CAACiB,IAAD,CAAZ,EAAoBhB,IAApB,EAAtB;AAEAL,IAAAA,QAAQ,CAACuB,IAAT,CAAc;AAAED,MAAAA,OAAO,EAAEA,OAAX;AAAoBrB,MAAAA,IAAI,EAAEa;AAA1B,KAAd;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYzB,QAAZ;AACH;;AACD,SAAOA,QAAP;AACH,CA1BD;;AA2BA,OAAO,eAAe0B,kBAAf,CAAkCC,GAAlC,EAAuC;AAC1C,QAAMC,eAAe,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,YAAhC,EAA8C,OAA9C,EAAuD,SAAvD,EAAkE,SAAlE,CAAxB;AACA,QAAMC,aAAa,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,YAAhC,EAA8C,OAA9C,EAAuD,SAAvD,EAAkE,SAAlE,CAAtB;AAEA,QAAMC,KAAK,GAAG,MAAMtC,CAAC,CAACoC,eAAD,CAArB;AACA,QAAMG,OAAO,GAAG,MAAMvC,CAAC,CAACqC,aAAD,CAAvB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACA,SAAO;AAAErB,IAAAA,KAAK,EAAE;AAAT,GAAP;AACH;AAED,eAAenB,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Search from \"../components/Search\";\r\nimport FavouriteCities from \"../components/FavouriteCities\";\r\nconst index = ({ data = [] }) => {\r\n    return (\r\n        <div>\r\n            <Search />\r\n            <FavouriteCities data={data} />\r\n            <FavouriteCities data={data} />\r\n        </div>\r\n    );\r\n};\r\nconst f = async (array = []) => {\r\n    const apikey1 = process.env.API_KEY_1;\r\n    const apikey2 = process.env.API_KEY_2;\r\n    const returned = [];\r\n    for (let city of array) {\r\n        const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${city}`;\r\n        const fetchedCoords = await (await fetch(url)).json();\r\n        if (fetchedCoords.Response.View[0] == undefined) {\r\n            return {\r\n                props: {\r\n                    error: \"oops\",\r\n                },\r\n            };\r\n        }\r\n        const loc = fetchedCoords.Response.View[0].Result[0].Location;\r\n        const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\r\n        const { Latitude, Longitude } = loc.DisplayPosition;\r\n        const url2 = `http://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=${apikey2}\r\n    `;\r\n\r\n        const weather = await (await fetch(url2)).json();\r\n\r\n        returned.push({ weather: weather, city: cityName });\r\n        console.log(returned);\r\n    }\r\n    return returned;\r\n};\r\nexport async function getServerSideProps(ctx) {\r\n    const favouriteCities = [\"rogow\", \"moskwa\", \"New York\", \"las palmas\", \"paryz\", \" ankara\", \"gorzyce\"];\r\n    const popularCities = [\"rogow\", \"moskwa\", \"New York\", \"las palmas\", \"paryz\", \" ankara\", \"gorzyce\"];\r\n\r\n    const liked = await f(favouriteCities);\r\n    const popular = await f(popularCities);\r\n    console.log(liked);\r\n    return { props: {} };\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
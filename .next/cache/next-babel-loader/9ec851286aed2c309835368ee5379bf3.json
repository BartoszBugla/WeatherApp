{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\current.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport Search from \"../components/Search\";\n\nconst index = ({\n  data,\n  city,\n  error\n}) => {\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  const temperature = Math.round(data.main.temp - 273.15);\n  const sky = data.weather[0].description;\n  const {\n    0: search,\n    1: setSearch\n  } = useState();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    e.persist();\n    Router.push({\n      pathname: `/current`,\n      query: {\n        cityName: search\n      }\n    });\n  };\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \" \", city), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \" Degrees(C):\", temperature), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \" Skies: \", sky, \" \"));\n};\n\nexport async function getServerSideProps(ctx) {\n  const {\n    query\n  } = ctx;\n  const queryCity = query.cityName ? query.cityName : \"Berlin\";\n  const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\n  const fetchedCoords = await (await fetch(url)).json();\n\n  if (fetchedCoords.Response.View[0] == undefined) {\n    return {\n      props: {\n        error: \"oops\"\n      }\n    };\n  }\n\n  const {\n    Latitude,\n    Longitude\n  } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\n  const city = fetchedCoords.Response.View[0].Result[0].Location.Address.Label; // console.log(fetchedCoords.Response.View[0].Result[0].Location.Address);\n  // ////////////////////////////////////\n\n  const url2 = `https://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\n  const data = await (await fetch(url2)).json(); // console.log(data);\n\n  return {\n    props: {\n      data,\n      city\n    }\n  };\n}\nexport default index;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/current.tsx"],"names":["React","useState","fetch","Router","Search","index","data","city","error","temperature","Math","round","main","temp","sky","weather","description","search","setSearch","handleSubmit","e","preventDefault","persist","push","pathname","query","cityName","handleChange","target","value","getServerSideProps","ctx","queryCity","url","fetchedCoords","json","Response","View","undefined","props","Latitude","Longitude","Result","Location","DisplayPosition","Address","Label","url2"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Router from \"next/router\";\r\nimport Search from \"../components/Search\";\r\n\r\nconst index = ({ data, city, error }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.main.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n    const [search, setSearch] = useState();\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        e.persist();\r\n        Router.push({\r\n            pathname: `/current`,\r\n            query: { cityName: search },\r\n        });\r\n    };\r\n    const handleChange = (e) => {\r\n        setSearch(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Search />\r\n\r\n            <div> {city}</div>\r\n            <div> Degrees(C):{temperature}</div>\r\n            <div> Skies: {sky} </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.Label;\r\n    // console.log(fetchedCoords.Response.View[0].Result[0].Location.Address);\r\n    // ////////////////////////////////////\r\n\r\n    const url2 = `https://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\r\n    const data = await (await fetch(url2)).json();\r\n    // console.log(data);\r\n    return { props: { data, city } };\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\result.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport Search from \"../components/Search\";\nimport Result from \"../components/WeatherBox\";\nimport Useless from \"../components/Useless\";\nimport NewForecast from \"../components/NewForecast\";\nimport { DataContextProvider, DataContext } from \"../components/DataContext\";\nvar Container = styled.div.withConfig({\n  displayName: \"result__Container\",\n  componentId: \"sc-1jcwjlt-0\"\n})([\"display:flex;flex-direction:column;min-height:100vh;max-width:100vw;\"]);\n_c = Container;\n\nvar result = function result(_ref) {\n  _s();\n\n  var data = _ref.data,\n      city = _ref.city,\n      error = _ref.error,\n      forecast = _ref.forecast,\n      timezone = _ref.timezone;\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  var temperature = Math.round(data.temp - 273.15);\n  var sky = data.weather[0].description;\n\n  var _useContext = useContext(DataContext),\n      datas = _useContext[0],\n      setData = _useContext[1];\n\n  setData(data);\n  return __jsx(DataContextProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, __jsx(Search, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }), __jsx(Result, {\n    dt: data.dt,\n    temperature: temperature,\n    sky: sky,\n    city: city,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, __jsx(Useless, {\n    wind: data.wind_speed,\n    sunrise: data.sunrise,\n    sunset: data.sunset,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  })), __jsx(NewForecast, {\n    forecast: forecast,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  })));\n};\n\n_s(result, \"A5Acysev9nWtqHzZQjevxYXjUck=\");\n\nexport var __N_SSP = true;\nexport default result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/result.tsx"],"names":["React","useContext","styled","Search","Result","Useless","NewForecast","DataContextProvider","DataContext","Container","div","result","data","city","error","forecast","timezone","temperature","Math","round","temp","sky","weather","description","datas","setData","dt","wind_speed","sunrise","sunset"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAGA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,2BAAjD;AACA,IAAMC,SAAS,GAAGP,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,4EAAf;KAAMD,S;;AAMN,IAAME,MAAM,GAAG,SAATA,MAAS,OAA+C;AAAA;;AAAA,MAA5CC,IAA4C,QAA5CA,IAA4C;AAAA,MAAtCC,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC1D,MAAIF,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACX,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWP,IAAI,CAACQ,IAAL,GAAY,MAAvB,CAApB;AACA,MAAMC,GAAG,GAAGT,IAAI,CAACU,OAAL,CAAa,CAAb,EAAgBC,WAA5B;;AAH0D,oBAIjCtB,UAAU,CAACO,WAAD,CAJuB;AAAA,MAInDgB,KAJmD;AAAA,MAI5CC,OAJ4C;;AAK1DA,EAAAA,OAAO,CAACb,IAAD,CAAP;AACA,SACI,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,EAAE,EAAEA,IAAI,CAACc,EAAjB;AAAqB,IAAA,WAAW,EAAET,WAAlC;AAA+C,IAAA,GAAG,EAAEI,GAApD;AAAyD,IAAA,IAAI,EAAER,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,OAAD;AAAS,IAAA,IAAI,EAAED,IAAI,CAACe,UAApB;AAAgC,IAAA,OAAO,EAAEf,IAAI,CAACgB,OAA9C;AAAuD,IAAA,MAAM,EAAEhB,IAAI,CAACiB,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,EAKI,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAEd,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,CADJ;AAWH,CAjBD;;GAAMJ,M;;;AAmDN,eAAeA,MAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Search from \"../components/Search\";\r\nimport Result from \"../components/WeatherBox\";\r\n\r\nimport Forecast from \"../components/Forecast\";\r\nimport Useless from \"../components/Useless\";\r\nimport NewForecast from \"../components/NewForecast\";\r\n\r\nimport { DataContextProvider, DataContext } from \"../components/DataContext\";\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    max-width: 100vw;\r\n`;\r\nconst result = ({ data, city, error, forecast, timezone }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n    const [datas, setData] = useContext(DataContext);\r\n    setData(data);\r\n    return (\r\n        <DataContextProvider>\r\n            <Container>\r\n                <Search />\r\n                <Result dt={data.dt} temperature={temperature} sky={sky} city={city}>\r\n                    <Useless wind={data.wind_speed} sunrise={data.sunrise} sunset={data.sunset} />\r\n                </Result>\r\n                <NewForecast forecast={forecast} />\r\n            </Container>\r\n        </DataContextProvider>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n    const apikey1 = process.env.API_KEY_1;\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        ? fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        : fetchedCoords.Response.View[0].Result[0].Location.Address.City;\r\n    // console.log(fetchedCoords.Response.View[0]);\r\n    // ////////////////////////////////////`\r\n    const apikey2 = process.env.API_KEY_2;\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=${apikey2}`;\r\n    const data = await (await fetch(url2)).json();\r\n    const current = data.current;\r\n    const forecast = data.daily;\r\n    const timezone = data.timezone_offset;\r\n    return { props: { data: current, forecast, city, timezone } };\r\n}\r\n\r\nexport default result;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\current.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Search from \"../components/Search\";\nimport Result from \"../components/Result\";\nimport styled from \"styled-components\";\nimport ConvertDate from \"../customF/ConvertDate\";\nvar Container = styled.div.withConfig({\n  displayName: \"current__Container\",\n  componentId: \"sc-1y58vn8-0\"\n})([\"display:flex;flex-direction:column;height:100vh;\"]);\n_c = Container;\n\nvar index = function index(_ref) {\n  var data = _ref.data,\n      city = _ref.city,\n      error = _ref.error;\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  var temperature = Math.round(data.main.temp - 273.15);\n  var sky = data.weather[0].description;\n  var date = ConvertDate(data.dt);\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }), __jsx(Result, {\n    date: date,\n    temperature: temperature,\n    sky: sky,\n    city: city,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport var __N_SSP = true;\nexport default index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/current.tsx"],"names":["React","Search","Result","styled","ConvertDate","Container","div","index","data","city","error","temperature","Math","round","main","temp","sky","weather","description","date","dt"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,IAAMC,SAAS,GAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,wDAAf;KAAMD,S;;AAKN,IAAME,KAAK,GAAG,SAARA,KAAQ,OAA2B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACrC,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACX,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,IAAL,CAAUC,IAAV,GAAiB,MAA5B,CAApB;AACA,MAAMC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,WAA5B;AACA,MAAMC,IAAI,GAAGf,WAAW,CAACI,IAAI,CAACY,EAAN,CAAxB;AAEA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAED,IAAd;AAAoB,IAAA,WAAW,EAAER,WAAjC;AAA8C,IAAA,GAAG,EAAEK,GAAnD;AAAwD,IAAA,IAAI,EAAEP,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAZD;;;AA4CA,eAAeF,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Router from \"next/router\";\r\nimport Search from \"../components/Search\";\r\nimport Result from \"../components/Result\";\r\nimport styled from \"styled-components\";\r\nimport ConvertDate from \"../customF/ConvertDate\";\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n`;\r\nconst index = ({ data, city, error }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.main.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n    const date = ConvertDate(data.dt);\r\n\r\n    return (\r\n        <Container>\r\n            <Search />\r\n            <Result date={date} temperature={temperature} sky={sky} city={city} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        ? fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        : fetchedCoords.Response.View[0].Result[0].Location.Address.City;\r\n    // console.log(fetchedCoords.Response.View[0].Result[0].Location.Address);\r\n    // ////////////////////////////////////\r\n\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\r\n    const data = await (await fetch(url2)).json();\r\n    // console.log(data);\r\n    return { props: { data, city } };\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
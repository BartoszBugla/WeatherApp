{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\current.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/Search\";\nimport Result from \"../components/Result\";\nimport styled from \"styled-components\";\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst index = ({\n  data,\n  city,\n  error\n}) => {\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  const temperature = Math.round(data.main.temp - 273.15);\n  const sky = data.weather[0].description;\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }), __jsx(Result, {\n    temperature: temperature,\n    city: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport async function getServerSideProps(ctx) {\n  const {\n    query\n  } = ctx;\n  const queryCity = query.cityName ? query.cityName : \"Berlin\";\n  const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\n  const fetchedCoords = await (await fetch(url)).json();\n\n  if (fetchedCoords.Response.View[0] == undefined) {\n    return {\n      props: {\n        error: \"oops\"\n      }\n    };\n  }\n\n  const {\n    Latitude,\n    Longitude\n  } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\n  const city = fetchedCoords.Response.View[0].Result[0].Location.Address.Label; // console.log(fetchedCoords.Response.View[0].Result[0].Location.Address);\n  // ////////////////////////////////////\n\n  const url2 = `https://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\n  const data = await (await fetch(url2)).json();\n  console.log(data);\n  return {\n    props: {\n      data,\n      city\n    }\n  };\n}\nexport default index;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/current.tsx"],"names":["React","fetch","Search","Result","styled","Container","div","index","data","city","error","temperature","Math","round","main","temp","sky","weather","description","getServerSideProps","ctx","query","queryCity","cityName","url","fetchedCoords","json","Response","View","undefined","props","Latitude","Longitude","Location","DisplayPosition","Address","Label","url2","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,SAAS,GAAGD,MAAM,CAACE,GAAI;;;CAA7B;;AAIA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA2B;AACrC,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACX,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,IAAL,CAAUC,IAAV,GAAiB,MAA5B,CAApB;AACA,QAAMC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,WAA5B;AAEA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,WAAW,EAAEP,WAArB;AAAkC,IAAA,IAAI,EAAEF,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAXD;;AAaA,OAAO,eAAeU,kBAAf,CAAkCC,GAAlC,EAAuC;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAYD,GAAlB;AAEA,QAAME,SAAS,GAAGD,KAAK,CAACE,QAAN,GAAiBF,KAAK,CAACE,QAAvB,GAAkC,QAApD;AAEA,QAAMC,GAAG,GAAI,kHAAiHF,SAAU,EAAxI;AAEA,QAAMG,aAAa,GAAG,MAAM,CAAC,MAAMxB,KAAK,CAACuB,GAAD,CAAZ,EAAmBE,IAAnB,EAA5B;;AACA,MAAID,aAAa,CAACE,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,KAAkCC,SAAtC,EAAiD;AAC7C,WAAO;AACHC,MAAAA,KAAK,EAAE;AACHpB,QAAAA,KAAK,EAAE;AADJ;AADJ,KAAP;AAKH;;AACD,QAAM;AAAEqB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BP,aAAa,CAACE,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,EAA+BzB,MAA/B,CAAsC,CAAtC,EAAyC8B,QAAzC,CAAkDC,eAAlF;AACA,QAAMzB,IAAI,GAAGgB,aAAa,CAACE,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,EAA+BzB,MAA/B,CAAsC,CAAtC,EAAyC8B,QAAzC,CAAkDE,OAAlD,CAA0DC,KAAvE,CAhB0C,CAiB1C;AACA;;AAEA,QAAMC,IAAI,GAAI,uDAAsDN,QAAS,QAAOC,SAAU,yCAA9F;AACA,QAAMxB,IAAI,GAAG,MAAM,CAAC,MAAMP,KAAK,CAACoC,IAAD,CAAZ,EAAoBX,IAApB,EAAnB;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ;AACA,SAAO;AAAEsB,IAAAA,KAAK,EAAE;AAAEtB,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAT,GAAP;AACH;AAED,eAAeF,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Router from \"next/router\";\r\nimport Search from \"../components/Search\";\r\nimport Result from \"../components/Result\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\nconst index = ({ data, city, error }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.main.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n\r\n    return (\r\n        <Container>\r\n            <Search />\r\n            <Result temperature={temperature} city={city} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.Label;\r\n    // console.log(fetchedCoords.Response.View[0].Result[0].Location.Address);\r\n    // ////////////////////////////////////\r\n\r\n    const url2 = `https://api.openweathermap.org/data/2.5/weather?lat=${Latitude}&lon=${Longitude}&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\r\n    const data = await (await fetch(url2)).json();\r\n    console.log(data);\r\n    return { props: { data, city } };\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
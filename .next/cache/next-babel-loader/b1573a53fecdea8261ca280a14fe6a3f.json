{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\result.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport Search from \"../components/Search\";\nimport Result from \"../components/WeatherBox\";\nimport { ConvertDate } from \"../customF/ConvertDate\";\nimport Useless from \"../components/Useless\";\nimport NewForecast from \"../components/NewForecast\";\nconst Container = styled.div.withConfig({\n  displayName: \"result__Container\",\n  componentId: \"sc-1jcwjlt-0\"\n})([\"display:flex;flex-direction:column;min-height:100vh;max-width:100vw;\"]);\n\nconst result = ({\n  data,\n  city,\n  error,\n  forecast,\n  timezone\n}) => {\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  const temperature = Math.round(data.temp - 273.15);\n  const sky = data.weather[0].description;\n  const date = ConvertDate(data.dt);\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }), __jsx(Result, {\n    date: date,\n    temperature: temperature,\n    sky: sky,\n    city: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(Useless, {\n    wind: data.wind_speed,\n    sunrise: data.sunrise,\n    sunset: data.sunset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  })), __jsx(NewForecast, {\n    forecast: forecast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport async function getServerSideProps(ctx) {\n  const {\n    query\n  } = ctx;\n  const queryCity = query.cityName ? query.cityName : \"Berlin\";\n  const apikey = process.env.API_KEY_1;\n  console.log(apikey);\n  const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\n  const fetchedCoords = await (await fetch(url)).json();\n\n  if (fetchedCoords.Response.View[0] == undefined) {\n    return {\n      props: {\n        error: \"oops\"\n      }\n    };\n  }\n\n  const {\n    Latitude,\n    Longitude\n  } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\n  const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District ? fetchedCoords.Response.View[0].Result[0].Location.Address.District : fetchedCoords.Response.View[0].Result[0].Location.Address.City; // console.log(fetchedCoords.Response.View[0]);\n  // ////////////////////////////////////`\n\n  const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\n    exclude=current,daily&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\n  const data = await (await fetch(url2)).json();\n  const current = data.current;\n  const forecast = data.daily;\n  const timezone = data.timezone_offset;\n  return {\n    props: {\n      data: current,\n      forecast,\n      city,\n      timezone\n    }\n  };\n}\nexport default result;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/result.tsx"],"names":["React","fetch","styled","Search","Result","ConvertDate","Useless","NewForecast","Container","div","result","data","city","error","forecast","timezone","temperature","Math","round","temp","sky","weather","description","date","dt","wind_speed","sunrise","sunset","getServerSideProps","ctx","query","queryCity","cityName","apikey","process","env","API_KEY_1","console","log","url","fetchedCoords","json","Response","View","undefined","props","Latitude","Longitude","Location","DisplayPosition","Address","District","City","url2","current","daily","timezone_offset"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Search from \"../components/Search\";\r\nimport Result from \"../components/WeatherBox\";\r\n\r\nimport { ConvertDate } from \"../customF/ConvertDate\";\r\nimport Forecast from \"../components/Forecast\";\r\nimport Useless from \"../components/Useless\";\r\nimport NewForecast from \"../components/NewForecast\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    max-width: 100vw;\r\n`;\r\nconst result = ({ data, city, error, forecast, timezone }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n    const date = ConvertDate(data.dt);\r\n\r\n    return (\r\n        <Container>\r\n            <Search />\r\n            <Result date={date} temperature={temperature} sky={sky} city={city}>\r\n                <Useless wind={data.wind_speed} sunrise={data.sunrise} sunset={data.sunset} />\r\n                {/* <Forecast forecast={forecast} /> */}\r\n            </Result>\r\n            <NewForecast forecast={forecast} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n    const apikey = process.env.API_KEY_1;\r\n    console.log(apikey);\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        ? fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        : fetchedCoords.Response.View[0].Result[0].Location.Address.City;\r\n    // console.log(fetchedCoords.Response.View[0]);\r\n    // ////////////////////////////////////`\r\n\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\r\n    const data = await (await fetch(url2)).json();\r\n    const current = data.current;\r\n    const forecast = data.daily;\r\n    const timezone = data.timezone_offset;\r\n    return { props: { data: current, forecast, city, timezone } };\r\n}\r\n\r\nexport default result;\r\n"]},"metadata":{},"sourceType":"module"}
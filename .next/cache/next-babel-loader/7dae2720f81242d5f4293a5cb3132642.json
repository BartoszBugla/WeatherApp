{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Search from \"../components/Search\";\nimport FavouriteCities from \"../components/FavouriteCities\";\n\nconst index = () => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }\n  }), __jsx(FavouriteCities, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport async function getServerSideProps(ctx) {\n  const favouriteCities = [\"bluszczów\"];\n  const favCoords = [];\n  const apikey1 = process.env.API_KEY_1;\n  const apikey2 = process.env.API_KEY_2;\n  const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\n    exclude=current,daily&appid=${apikey2}`;\n\n  for (let city in favouriteCities) {\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${queryCity}`;\n    const fetchedCoords = await (await fetch(url)).json();\n    const loc = fetchedCoords.Response.View[0].Result[0].Location;\n    const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\n    favCoords.push(loc.DisplayPosition);\n  }\n\n  if (fetchedCoords.Response.View[0] == undefined) {\n    return {\n      props: {\n        error: \"oops\"\n      }\n    };\n  } // console.log(fetchedCoords.Response.View[0]);\n  // ////////////////////////////////////`\n\n\n  const data = await (await fetch(url2)).json();\n  const current = data.current;\n  const forecast = data.daily;\n  const timezone = data.timezone_offset;\n  return {\n    props: {\n      data: current,\n      forecast,\n      city,\n      timezone\n    }\n  };\n}\nexport default index;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/index.tsx"],"names":["React","Search","FavouriteCities","index","getServerSideProps","ctx","favouriteCities","favCoords","apikey1","process","env","API_KEY_1","apikey2","API_KEY_2","url2","Latitude","Longitude","city","url","queryCity","fetchedCoords","fetch","json","loc","Response","View","Result","Location","cityName","Address","District","City","push","DisplayPosition","undefined","props","error","data","current","forecast","daily","timezone","timezone_offset"],"mappings":";;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;;AACA,MAAMC,KAAK,GAAG,MAAM;AAChB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAPD;;AAQA,OAAO,eAAeC,kBAAf,CAAkCC,GAAlC,EAAuC;AAC1C,QAAMC,eAAe,GAAG,CAAC,WAAD,CAAxB;AACA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA5B;AACA,QAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,SAA5B;AAEA,QAAMC,IAAI,GAAI,2DAA0DC,QAAS,QAAOC,SAAU;kCACpEJ,OAAQ,EADtC;;AAEA,OAAK,IAAIK,IAAT,IAAiBX,eAAjB,EAAkC;AAC9B,UAAMY,GAAG,GAAI,2DAA0DV,OAAQ,eAAcW,SAAU,EAAvG;AACA,UAAMC,aAAa,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACH,GAAD,CAAZ,EAAmBI,IAAnB,EAA5B;AACA,UAAMC,GAAG,GAAGH,aAAa,CAACI,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,EAA+BC,MAA/B,CAAsC,CAAtC,EAAyCC,QAArD;AACA,UAAMC,QAAQ,GAAGL,GAAG,CAACM,OAAJ,CAAYC,QAAZ,GAAuBP,GAAG,CAACM,OAAJ,CAAYC,QAAnC,GAA8CP,GAAG,CAACM,OAAJ,CAAYE,IAA3E;AACAxB,IAAAA,SAAS,CAACyB,IAAV,CAAeT,GAAG,CAACU,eAAnB;AACH;;AAED,MAAIb,aAAa,CAACI,QAAd,CAAuBC,IAAvB,CAA4B,CAA5B,KAAkCS,SAAtC,EAAiD;AAC7C,WAAO;AACHC,MAAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE;AADJ;AADJ,KAAP;AAKH,GAtByC,CAwB1C;AACA;;;AAEA,QAAMC,IAAI,GAAG,MAAM,CAAC,MAAMhB,KAAK,CAACP,IAAD,CAAZ,EAAoBQ,IAApB,EAAnB;AACA,QAAMgB,OAAO,GAAGD,IAAI,CAACC,OAArB;AACA,QAAMC,QAAQ,GAAGF,IAAI,CAACG,KAAtB;AACA,QAAMC,QAAQ,GAAGJ,IAAI,CAACK,eAAtB;AACA,SAAO;AAAEP,IAAAA,KAAK,EAAE;AAAEE,MAAAA,IAAI,EAAEC,OAAR;AAAiBC,MAAAA,QAAjB;AAA2BtB,MAAAA,IAA3B;AAAiCwB,MAAAA;AAAjC;AAAT,GAAP;AACH;AAED,eAAetC,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Search from \"../components/Search\";\r\nimport FavouriteCities from \"../components/FavouriteCities\";\r\nconst index = () => {\r\n    return (\r\n        <div>\r\n            <Search />\r\n            <FavouriteCities />\r\n        </div>\r\n    );\r\n};\r\nexport async function getServerSideProps(ctx) {\r\n    const favouriteCities = [\"bluszczów\"];\r\n    const favCoords = [];\r\n    const apikey1 = process.env.API_KEY_1;\r\n    const apikey2 = process.env.API_KEY_2;\r\n\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=${apikey2}`;\r\n    for (let city in favouriteCities) {\r\n        const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${queryCity}`;\r\n        const fetchedCoords = await (await fetch(url)).json();\r\n        const loc = fetchedCoords.Response.View[0].Result[0].Location;\r\n        const cityName = loc.Address.District ? loc.Address.District : loc.Address.City;\r\n        favCoords.push(loc.DisplayPosition);\r\n    }\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n\r\n    // console.log(fetchedCoords.Response.View[0]);\r\n    // ////////////////////////////////////`\r\n\r\n    const data = await (await fetch(url2)).json();\r\n    const current = data.current;\r\n    const forecast = data.daily;\r\n    const timezone = data.timezone_offset;\r\n    return { props: { data: current, forecast, city, timezone } };\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}
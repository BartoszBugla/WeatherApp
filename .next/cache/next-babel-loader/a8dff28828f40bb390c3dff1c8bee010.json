{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\result.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../components/Layout\";\nimport WeatherBox from \"../components/WeatherBox\";\nimport Useless from \"../components/Useless\";\nimport NewForecast from \"../components/NewForecast\";\n\nvar result = function result(_ref) {\n  var data = _ref.data,\n      city = _ref.city,\n      error = _ref.error,\n      forecast = _ref.forecast,\n      timezone = _ref.timezone;\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  var temperature = Math.round(data.temp - 273.15);\n  var sky = data.weather[0].description;\n  return __jsx(Layout, {\n    title: \"\".concat(city, \" | Weather\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(WeatherBox, {\n    timezone: timezone,\n    dt: data.dt,\n    temperature: temperature,\n    sky: sky,\n    city: city,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(Useless, {\n    wind: data.wind_speed,\n    sunrise: data.sunrise,\n    sunset: data.sunset,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  }), __jsx(NewForecast, {\n    forecast: forecast,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport var __N_SSP = true;\nexport default result;","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/result.tsx"],"names":["React","Layout","WeatherBox","Useless","NewForecast","result","data","city","error","forecast","timezone","temperature","Math","round","temp","sky","weather","description","dt","wind_speed","sunrise","sunset"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA+C;AAAA,MAA5CC,IAA4C,QAA5CA,IAA4C;AAAA,MAAtCC,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC1D,MAAIF,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACX,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWP,IAAI,CAACQ,IAAL,GAAY,MAAvB,CAApB;AACA,MAAMC,GAAG,GAAGT,IAAI,CAACU,OAAL,CAAa,CAAb,EAAgBC,WAA5B;AAEA,SACI,MAAC,MAAD;AAAQ,IAAA,KAAK,YAAKV,IAAL,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEG,QAAtB;AAAgC,IAAA,EAAE,EAAEJ,IAAI,CAACY,EAAzC;AAA6C,IAAA,WAAW,EAAEP,WAA1D;AAAuE,IAAA,GAAG,EAAEI,GAA5E;AAAiF,IAAA,IAAI,EAAER,IAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,OAAD;AAAS,IAAA,IAAI,EAAED,IAAI,CAACa,UAApB;AAAgC,IAAA,OAAO,EAAEb,IAAI,CAACc,OAA9C;AAAuD,IAAA,MAAM,EAAEd,IAAI,CAACe,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAEZ,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ;AAQH,CAbD;;;AA+CA,eAAeJ,MAAf","sourcesContent":["import React from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Layout from \"../components/Layout\";\r\nimport WeatherBox from \"../components/WeatherBox\";\r\n\r\nimport Useless from \"../components/Useless\";\r\nimport NewForecast from \"../components/NewForecast\";\r\n\r\nconst result = ({ data, city, error, forecast, timezone }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n\r\n    return (\r\n        <Layout title={`${city} | Weather`}>\r\n            <WeatherBox timezone={timezone} dt={data.dt} temperature={temperature} sky={sky} city={city}>\r\n                <Useless wind={data.wind_speed} sunrise={data.sunrise} sunset={data.sunset} />\r\n                <NewForecast forecast={forecast} />\r\n            </WeatherBox>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n    const apikey1 = process.env.API_KEY_1;\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=${apikey1}&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        ? fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        : fetchedCoords.Response.View[0].Result[0].Location.Address.City;\r\n    // console.log(fetchedCoords.Response.View[0]);\r\n    // ////////////////////////////////////`\r\n    const apikey2 = process.env.API_KEY_2;\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=${apikey2}`;\r\n    const data = await (await fetch(url2)).json();\r\n    const current = data.current;\r\n    const forecast = data.daily;\r\n    const timezone = data.timezone_offset;\r\n    return { props: { data: current, forecast, city, timezone } };\r\n}\r\n\r\nexport default result;\r\n"]},"metadata":{},"sourceType":"module"}
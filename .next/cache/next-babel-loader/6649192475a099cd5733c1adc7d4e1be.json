{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Bartosz\\\\Desktop\\\\weatherApp\\\\pages\\\\result.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Search from \"../components/Search\";\nimport Result from \"../components/WeatherBox\";\nimport { ConvertDate } from \"../customF/ConvertDate\";\nimport Forecast from \"../components/Forecast\";\nimport Useless from \"../components/Useless\";\nvar Container = styled.div.withConfig({\n  displayName: \"result__Container\",\n  componentId: \"sc-1jcwjlt-0\"\n})([\"display:flex;flex-direction:column;height:100vh;max-width:100vw;\"]);\n_c = Container;\n\nvar result = function result(_ref) {\n  var data = _ref.data,\n      city = _ref.city,\n      error = _ref.error,\n      forecast = _ref.forecast;\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 23\n    }\n  }, \"You passed Wrong localization\");\n  var temperature = Math.round(data.temp - 273.15);\n  var sky = data.weather[0].description;\n  var date = ConvertDate(data.dt);\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Search, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), __jsx(Result, {\n    date: date,\n    temperature: temperature,\n    sky: sky,\n    city: city,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, __jsx(Useless, {\n    wind: data.wind_speed,\n    sunrise: data.sunrise,\n    sunset: data.sunset,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }), __jsx(Forecast, {\n    forecast: forecast,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport var __N_SSP = true;\nexport default result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/weatherApp/pages/result.tsx"],"names":["React","styled","Search","Result","ConvertDate","Forecast","Useless","Container","div","result","data","city","error","forecast","temperature","Math","round","temp","sky","weather","description","date","dt","wind_speed","sunrise","sunset"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,IAAMC,SAAS,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,wEAAf;KAAMD,S;;AAMN,IAAME,MAAM,GAAG,SAATA,MAAS,OAAqC;AAAA,MAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAChD,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACX,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,IAAL,GAAY,MAAvB,CAApB;AACA,MAAMC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,WAA5B;AACA,MAAMC,IAAI,GAAGjB,WAAW,CAACM,IAAI,CAACY,EAAN,CAAxB;AAEA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAED,IAAd;AAAoB,IAAA,WAAW,EAAEP,WAAjC;AAA8C,IAAA,GAAG,EAAEI,GAAnD;AAAwD,IAAA,IAAI,EAAEP,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,OAAD;AAAS,IAAA,IAAI,EAAED,IAAI,CAACa,UAApB;AAAgC,IAAA,OAAO,EAAEb,IAAI,CAACc,OAA9C;AAAuD,IAAA,MAAM,EAAEd,IAAI,CAACe,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEZ,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CADJ;AASH,CAfD;;;AAiDA,eAAeJ,MAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Search from \"../components/Search\";\r\nimport Result from \"../components/WeatherBox\";\r\n\r\nimport { ConvertDate } from \"../customF/ConvertDate\";\r\nimport Forecast from \"../components/Forecast\";\r\nimport Useless from \"../components/Useless\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    max-width: 100vw;\r\n`;\r\nconst result = ({ data, city, error, forecast }) => {\r\n    if (error) return <div>You passed Wrong localization</div>;\r\n    const temperature = Math.round(data.temp - 273.15);\r\n    const sky = data.weather[0].description;\r\n    const date = ConvertDate(data.dt);\r\n\r\n    return (\r\n        <Container>\r\n            <Search />\r\n            <Result date={date} temperature={temperature} sky={sky} city={city}>\r\n                <Useless wind={data.wind_speed} sunrise={data.sunrise} sunset={data.sunset} />\r\n                <Forecast forecast={forecast} />\r\n            </Result>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n\r\n    const queryCity = query.cityName ? query.cityName : \"Berlin\";\r\n\r\n    const url = `https://geocoder.ls.hereapi.com/6.2/geocode.json?apiKey=FI0ZPYdRRTTdhdTKQwENNV-OAS4OA13qj97BqtkoU2M&searchtext=${queryCity}`;\r\n\r\n    const fetchedCoords = await (await fetch(url)).json();\r\n\r\n    if (fetchedCoords.Response.View[0] == undefined) {\r\n        return {\r\n            props: {\r\n                error: \"oops\",\r\n            },\r\n        };\r\n    }\r\n    const { Latitude, Longitude } = fetchedCoords.Response.View[0].Result[0].Location.DisplayPosition;\r\n    const city = fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        ? fetchedCoords.Response.View[0].Result[0].Location.Address.District\r\n        : fetchedCoords.Response.View[0].Result[0].Location.Address.City;\r\n    console.log(fetchedCoords.Response.View[0]);\r\n    // ////////////////////////////////////`\r\n\r\n    const url2 = `    https://api.openweathermap.org/data/2.5/onecall?lat=${Latitude}&lon=${Longitude}&\r\n    exclude=current,daily&appid=ba590e34cd2c5e9d9bfa284e3f0b6a6e`;\r\n    const data = await (await fetch(url2)).json();\r\n    const current = data.current;\r\n    const forecast = data.daily;\r\n    console.log(data.timezone_offset);\r\n    return { props: { data: current, forecast, city, timezone: data.timezone_offset } };\r\n}\r\n\r\nexport default result;\r\n"]},"metadata":{},"sourceType":"module"}